; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "ISOB"
#define MyAppVersion "1.5"
#define MyAppPublisher "Piacherski 153503"
#define MyAppURL "iis.bsuir.by"
#define MyAppExeName "Lab45.exe"
#define MyAppAssocName MyAppName + " File"
#define MyAppAssocExt ".myp"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt

[Setup]
AppId={{51681AF3-8E61-4F0A-8718-581A8D0F0EDD}}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
ChangesAssociations=yes
DisableProgramGroupPage=yes
OutputBaseFilename=mysetup
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\Users\Максим\Desktop\Lab45\Lab45\bin\Debug\net6.0-windows\Lab45.exe"; DestDir: "{app}"; Flags: ignoreversion; AfterInstall: CheckFileHash
Source: "C:\Users\Максим\Desktop\Lab45\Lab45\bin\Debug\net6.0-windows\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion; 
Source: "C:\Users\Максим\Desktop\Lab45\Lab45\bin\Debug\net6.0-windows\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\Максим\Desktop\Lab45\Lab45\bin\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs


[Registry]
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""
Root: HKA; Subkey: "Software\Classes\Applications\{#MyAppExeName}\SupportedTypes"; ValueType: string; ValueName: ".myp"; ValueData: ""

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
const
  EXPECTED_HASH = '50e43d367e22a2ce60447e7114d7f5c3233aec31a545fdfd6469e499943c82cc';

function ExecCmd(const CmdLine: String; const WorkingDir: String; var Output: AnsiString): Boolean;
var
  ResultCode: Integer;
begin
  Result := Exec(ExpandConstant('{cmd}'), '/C ' + CmdLine, WorkingDir, SW_HIDE, ewWaitUntilTerminated, ResultCode);
  if Result then
    LoadStringFromFile(ExpandConstant('{tmp}\HashOutput.txt'), Output);
end;

procedure CheckFileHash;
var
  FilePath: String;
  FileHash: AnsiString;
  CmdLine: String;
begin
  FilePath := ExpandConstant('{app}\File.exe');
  CmdLine := 'certutil -hashfile "' + FilePath + '" SHA256 > "{tmp}\HashOutput.txt"';
  if ExecCmd(CmdLine, '', FileHash) then
  begin
    FileHash := Trim(FileHash);
    if FileHash <> EXPECTED_HASH then
    begin
      MsgBox('File integrity check failed! Installation will be aborted.', mbError, MB_OK);
      Abort;
    end;
  end
  else
  begin
    MsgBox('Failed to execute certutil command!', mbError, MB_OK);
    Abort;
  end;
end;



  var
  LicensePage: TInputQueryWizardPage;

procedure InitializeWizard;
begin
  LicensePage := CreateInputQueryPage(wpWelcome, 'Лицензионный ключ', 'Пожалуйста, введите ваш лицензионный ключ для продолжения установки.', 'Введите ключ:');
  LicensePage.Add('', False); // Добавляем поле ввода для ключа
  LicensePage.Values[0] := ''; // Оставляем поле ввода пустым по умолчанию
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  Result := True; // Возвращаем true по умолчанию

  if CurPageID = LicensePage.ID then
  begin
    // Проверяем введенный ключ
    if LicensePage.Values[0] <> '12345678' then
    begin
      MsgBox('Неверный лицензионный ключ!', mbError, MB_OK);
      Result := False; // Останавливаем установку
    end;
  end;
end;

